package org.example.cayenne.persistent.auto;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.LocalDate;
import java.util.List;

import org.apache.cayenne.BaseDataObject;
import org.apache.cayenne.exp.property.DateProperty;
import org.apache.cayenne.exp.property.ListProperty;
import org.apache.cayenne.exp.property.PropertyFactory;
import org.apache.cayenne.exp.property.StringProperty;
import org.example.cayenne.persistent.Paiting;

/**
 * Class _Artist was generated by Cayenne.
 * It is probably a good idea to avoid changing this class manually,
 * since it may be overwritten next time code is regenerated.
 * If you need to make any customizations, please use subclass.
 */
public abstract class _Artist extends BaseDataObject {

    private static final long serialVersionUID = 1L;

    public static final String ID_PK_COLUMN = "ID";

    public static final DateProperty<LocalDate> DATE_OF_BIRTH_DATE = PropertyFactory.createDate("dateOfBirthDate", LocalDate.class);
    public static final StringProperty<String> NAME = PropertyFactory.createString("name", String.class);
    public static final ListProperty<Paiting> PAITINGS = PropertyFactory.createList("paitings", Paiting.class);

    protected LocalDate dateOfBirthDate;
    protected String name;

    protected Object paitings;

    public void setDateOfBirthDate(LocalDate dateOfBirthDate) {
        beforePropertyWrite("dateOfBirthDate", this.dateOfBirthDate, dateOfBirthDate);
        this.dateOfBirthDate = dateOfBirthDate;
    }

    public LocalDate getDateOfBirthDate() {
        beforePropertyRead("dateOfBirthDate");
        return this.dateOfBirthDate;
    }

    public void setName(String name) {
        beforePropertyWrite("name", this.name, name);
        this.name = name;
    }

    public String getName() {
        beforePropertyRead("name");
        return this.name;
    }

    public void addToPaitings(Paiting obj) {
        addToManyTarget("paitings", obj, true);
    }

    public void removeFromPaitings(Paiting obj) {
        removeToManyTarget("paitings", obj, true);
    }

    @SuppressWarnings("unchecked")
    public List<Paiting> getPaitings() {
        return (List<Paiting>)readProperty("paitings");
    }

    @Override
    public Object readPropertyDirectly(String propName) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch(propName) {
            case "dateOfBirthDate":
                return this.dateOfBirthDate;
            case "name":
                return this.name;
            case "paitings":
                return this.paitings;
            default:
                return super.readPropertyDirectly(propName);
        }
    }

    @Override
    public void writePropertyDirectly(String propName, Object val) {
        if(propName == null) {
            throw new IllegalArgumentException();
        }

        switch (propName) {
            case "dateOfBirthDate":
                this.dateOfBirthDate = (LocalDate)val;
                break;
            case "name":
                this.name = (String)val;
                break;
            case "paitings":
                this.paitings = val;
                break;
            default:
                super.writePropertyDirectly(propName, val);
        }
    }

    private void writeObject(ObjectOutputStream out) throws IOException {
        writeSerialized(out);
    }

    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {
        readSerialized(in);
    }

    @Override
    protected void writeState(ObjectOutputStream out) throws IOException {
        super.writeState(out);
        out.writeObject(this.dateOfBirthDate);
        out.writeObject(this.name);
        out.writeObject(this.paitings);
    }

    @Override
    protected void readState(ObjectInputStream in) throws IOException, ClassNotFoundException {
        super.readState(in);
        this.dateOfBirthDate = (LocalDate)in.readObject();
        this.name = (String)in.readObject();
        this.paitings = in.readObject();
    }

}
